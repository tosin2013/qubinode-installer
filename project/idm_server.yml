---
- name: deploy IdM server
  hosts: qbn-dns01
  remote_user: admin
  become: true
  vars_files:
    - ../inventory/rhel8_host_vars
    - ../inventory/kvm_host.yml
    - ../env/passwords
    - host_vars/idm_dns.yml

  tasks:
    - name: Check if IdM is answering
      vars:
        vm_name: "{{ dns_server_vm.dns_name }}"
      uri:
        url: "https://{{ vm_name  }}.{{ domain }}/ipa/ui"
        user: "{{ idm_admin_user }}"
        password: "{{ idm_admin_password }}"
        force_basic_auth: yes
      register: idm_is_installed
      ignore_errors: yes
      tags: [always]

    - name: Set idm_is_installed fact
      set_fact:
        idm_is_installed: "{{ False if idm_is_installed.failed | default(False) or idm_is_installed.status != 200 else True }}"
      tags: [always]

    - name: ensure system is registered to Red Hat
      vars:
        rhsm_repos: "{{ idm_repos }}"
      include_role:
        name: swygue-redhat-subscription
      when:  not idm_is_installed

    - name: update system
      command: yum update -y
      args:
        warn: false
      changed_when: false
      when:  not idm_is_installed

    - name: Install IDM server
      include_role:
        name: ansible-idm
      tags: [install,preinstall,installer,firewall,always,result]
      when:  not idm_is_installed

    - name: ensure firewalld rules are loaded
      command: systemctl restart firewalld
      args:
        warn: no
      changed_when: False
      failed_when: False
      when:  not idm_is_installed

    - name: post IDM server install check if IDM is answering
      vars:
        vm_name: "{{ dns_server_vm.dns_name }}"
      uri:
        url: "https://{{ vm_name  }}.{{ domain }}/ipa/ui"
        user: "{{ idm_admin_user }}"
        password: "{{ idm_admin_password }}"
        force_basic_auth: yes
      register: idm_is_installed
      ignore_errors: yes
      tags: [always]

    - name: exit if idm installed failed
      set_fact:
        idm_is_installed: "{{ False if idm_is_installed.failed | default(False) or idm_is_installed.status != 200 else True }}"
      tags: [always]

    - name: fail if IDM server is not installed
      fail:
        msg: |
          The IDM server does not appear to have been installed.
          Please re-run qubinode-installer or undeploy and start again.
      when: not idm_is_installed|bool

    - name: ensure backup folder is created
      vars:
        ansible_python_interpreter: /usr/bin/python3
      file:
        path: "{{ project_dir }}/backups"
        state: directory
        mode: '0755'
      delegate_to: 127.0.0.1

    - name: check if resolv.conf backup file exists
      vars:
        ansible_python_interpreter: /usr/bin/python3
      stat:
        path: "{{ project_dir }}/backups/resolv.conf"
      register: resolv_backup
      when:  idm_is_installed|bool
      delegate_to: 127.0.0.1

    - name: backup original /etc/resolv.conf file
      vars:
        ansible_python_interpreter: /usr/bin/python3
      copy:
        src: /etc/resolv.conf
        dest: "{{ project_dir }}/backups/resolv.conf"
        follow: yes
      when: not vm_teardown|bool and not resolv_backup.stat.exists and idm_is_installed|bool
      delegate_to: 127.0.0.1

    - name: update KVM host /etc/resolv.conf to point to the IdM server {{ vm_name }}
      vars:
        ansible_python_interpreter: /usr/bin/python3
      copy:
        content: |
          search {{ search_domains  | first }}
          nameserver {{ idm_server_ip }}
        dest: /etc/resolv.conf
      when: not vm_teardown|bool and idm_is_installed|bool
      delegate_to: 127.0.0.1

    - name: Restore original /etc/resolv.conf file
      vars:
        ansible_python_interpreter: /usr/bin/python3
      copy:
        src: "{{ project_dir }}/backups/resolv.conf"
        dest: /etc/resolv.conf
        follow: yes
      when: vm_teardown|bool and not resolv_backup.stat.exists and not idm_is_installed|bool
      delegate_to: 127.0.0.1


